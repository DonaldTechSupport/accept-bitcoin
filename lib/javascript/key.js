// Generated by CoffeeScript 1.6.3
var Key, bitcore, crypt, fs;

bitcore = require('bitcore');

crypt = require('./encrypt');

fs = require('fs');

Key = (function() {
  function Key(settings, publicKey, privateKey) {
    this.settings = settings;
    this.publicKey = publicKey;
    this.privateKey = privateKey;
    if (!(this.publicKey && this.privateKey)) {
      this.wk = new bitcore.WalletKey({
        network: this.settings.network
      });
      this.wk.generate();
      this.storeKey();
    }
    this.printKey();
  }

  Key.prototype.wk = function() {
    return this.wk;
  };

  Key.prototype.address = function() {
    return this.publicKey || this.wk.storeObj().addr;
  };

  Key.prototype.privateKey = function() {
    return this.privateKey || bitcore.buffertools.toHex(this.wk.privKey["private"]);
  };

  Key.prototype.printKey = function(wk) {
    var wkObj;
    if (wk == null) {
      wk = this.wk;
    }
    if (this.publicKey && this.privateKey) {
      return console.log("public: " + this.publicKey + " private: " + this.privateKey);
    } else {
      console.log("## Network: " + wk.network.name);
      console.log("*** Hex Representation");
      console.log("Private: " + bitcore.buffertools.toHex(wk.privKey["private"]));
      console.log("Public : " + bitcore.buffertools.toHex(wk.privKey["public"]));
      console.log("Public Compressed : " + (wk.privKey.compressed ? "Yes" : "No"));
      wkObj = wk.storeObj();
      console.log("*** WalletKey Store Object");
      console.log("Private: " + wkObj.priv);
      console.log("Public : " + wkObj.pub);
      return console.log("Addr   : " + wkObj.addr);
    }
  };

  Key.prototype.storeKey = function(wk) {
    var privateKey, wkObj;
    if (wk == null) {
      wk = this.wk;
    }
    wkObj = wk.storeObj();
    privateKey = this.settings.encryptPrivateKey ? crypt.encrypt(bitcore.buffertools.toHex(this.privateKey()), this.settings.password) : privateKey();
    return fs.appendFileSync(this.settings.storePath, this.address() + "|" + privateKey + "\n");
  };

  Key.prototype.readKeys = function() {
    var lines;
    lines = fs.readFileSync(this.settings.storePath).toString().split("\n");
    return console.log(lines);
  };

  return Key;

})();

module.exports = Key;
