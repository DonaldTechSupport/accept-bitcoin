// Generated by CoffeeScript 1.6.3
(function() {
  var Key, bitcore, crypt, ee, fs, request,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  bitcore = require('bitcore');

  crypt = require('./encrypt');

  fs = require('fs');

  request = require('request');

  ee = require('events').EventEmitter;

  Key = (function() {
    function Key(settings, publicKey, privateKeyWif) {
      this.settings = settings;
      this.publicKey = publicKey;
      this.privateKeyWif = privateKeyWif;
      this.checkBalance = __bind(this.checkBalance, this);
      this.readKeys = __bind(this.readKeys, this);
      this.storeKey = __bind(this.storeKey, this);
      this.printKey = __bind(this.printKey, this);
      this.privateKey = __bind(this.privateKey, this);
      this.address = __bind(this.address, this);
      this.wk = __bind(this.wk, this);
      ee.call(this);
      this.wk = new bitcore.WalletKey({
        network: this.settings.network
      });
      if (this.privateKeyWif) {
        this.wk.fromObj({
          priv: this.privateKeyWif
        });
      }
      if (arguments.length <= 1) {
        this.wk.generate();
        this.storeKey();
      }
      this.printKey(this.wk);
    }

    Key.prototype.wk = function() {
      return this.wk;
    };

    Key.prototype.address = function() {
      return this.publicKey || this.wk.storeObj().addr;
    };

    Key.prototype.privateKey = function() {
      return this.privateKeyWif || this.wk.storeObj().priv;
    };

    Key.prototype.printKey = function(wk) {
      var wkObj;
      if (wk == null) {
        wk = this.wk;
      }
      if (this.publicKey && this.privateKeyWif) {
        return console.log("public: " + this.publicKey + " private: " + this.privateKeyWif);
      } else {
        console.log("## Network: " + wk.network.name);
        console.log("*** Hex Representation");
        console.log("Private: " + bitcore.buffertools.toHex(wk.privKey["private"]));
        console.log("Public : " + bitcore.buffertools.toHex(wk.privKey["public"]));
        console.log("Public Compressed : " + (wk.privKey.compressed ? "Yes" : "No"));
        wkObj = wk.storeObj();
        console.log("*** WalletKey Store Object");
        console.log("Private: " + wkObj.priv);
        console.log("Public : " + wkObj.pub);
        return console.log("Addr   : " + wkObj.addr);
      }
    };

    Key.prototype.storeKey = function(wk) {
      var privateKey, wkObj;
      if (wk == null) {
        wk = this.wk;
      }
      wkObj = wk.storeObj();
      privateKey = this.settings.encryptPrivateKey ? crypt.encrypt(this.privateKey(), this.settings.password) : this.privateKey();
      return fs.appendFileSync(this.settings.storePath, this.address() + "|" + privateKey + "\n");
    };

    Key.prototype.readKeys = function() {
      var lines;
      lines = fs.readFileSync(this.settings.storePath).toString().split("\n");
      return console.log(lines);
    };

    Key.prototype.checkBalance = function() {
      var checkBalanceInterval, checkBalanceTimeout,
        _this = this;
      checkBalanceTimeout = setTimeout(function() {
        return this.emit('checkBalanceTimeout');
      }, this.settings.checkBalanceTimeout);
      return checkBalanceInterval = setInterval(function() {
        console.log("checking balance for " + (_this.address()));
        return request.get("http://" + (_this.settings.network === bitcore.networks.testnet ? 't' : '') + "btc.blockr.io/api/v1/address/info/" + (_this.address()) + (_this.settings.includeUnconfirmed ? '?unconfirmed=1' : ''), function(error, response, body) {
          var _ref, _ref1;
          body = JSON.parse(body);
          if (body.status === 'success' && ((_ref = body.data) != null ? _ref.balance : void 0) > 0) {
            clearInterval(checkBalanceInterval);
            clearTimeout(checkBalanceTimeout);
            return _this.emit('haveBalance', null, (_ref1 = body.data) != null ? _ref1.balance : void 0);
          }
        });
      }, this.settings.checkTransactionEvery);
    };

    return Key;

  })();

  Key.prototype.__proto__ = ee.prototype;

  module.exports = Key;

}).call(this);
