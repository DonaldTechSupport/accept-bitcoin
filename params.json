{"name":"Accept-bitcoin","tagline":"accept bitcoin payments using node.js","body":"#Accept Bitcoin\r\n\r\n\r\nFinally a developer-friendly tool to simply accept bitcoins in your site. \r\n\r\n  - Lite and fast, built on top of [bitcore](http://bitcore.io).\r\n  - No need to install local bitcoin node RPC client.\r\n  - No need to install any wallet client.\r\n  - Create ad-hoc address to accept bitcoins and transfer incomes to your offline account.\r\n  - Easy configurations.\r\n\r\n\r\n##Get Started\r\n\r\nSimply install via [npm](https://npmjs.org/):\r\n\r\n```\r\nnpm install accept-bitcoin\r\n```\r\n##Motivation \r\nAccepting bitcoins online can be complex to program and require you to install a bitcoin RPC client in order to read and write to the blockchain. This client require a lot of resources (in terms of CPU and storage).  \r\nMost of the users are using a wallet to store their bitcoins. This wallet is a simple way to secure your public and private key. For security reasons you better save this wallet offline in a \"cold storage\".   \r\nYou need a way to accept bitcoins \r\nMore about the motivation behind this project at [my blog post](http://sagivo.com/post/97125970778/bitcoin-on-node-js-do-it-yourself).\r\n\r\n##Example\r\nYou can override the default settings on creating\r\n\r\nExamples are provided [here](https://github.com/sagivo/accept-bitcoin/blob/master/examples.js)\r\n```javascript\r\nvar settings = {network: 'live'}\r\nvar acceptBitcoin = require('accept-bitcoin');\r\nvar ac = new acceptBitcoin('YOUR_BITCOIN_ADDRESS', settings);\r\nkey = ac.generateAddress({alertWhenHasBalance: true});\r\nconsole.log(\"Hello buyer! please pay to: \" + key.address());\r\nkey.on('hasBalance', function(amount){\r\n  console.log \"thanks for paying me \" + amount; //do stuff\r\n  key.transferBalanceToMyAccount(function(err, d){\r\n    if (d.status === 'success') console.log(\"Cool, the bitcoins are in my private account!\");\r\n  });\r\n});\r\n```\r\n\r\n##Settings\r\n\r\nYou can override the default settings:  \r\n  - **payToAddress**: Your bitcoin adress you wish to transfer incomes to. \r\n  - **network**: choose your bitcoin RPC env. values are: `test` and `live`\r\nmore info [here](https://github.com/bitpay/bitcore/blob/cd353ac02e76fb3294c40366d8d5dc04ce1939d7/networks.js)  \r\n  - **password**: choose your random password to encrypt generated keys.  \r\n  - **storePath**: path to store a file containing all the ad-hoc generated keys. Default is `./keys.json`\r\n  - **encryptPrivateKey**: in case you want the stored keys to be encrypted (using `password`). Default is `false`.\r\n  - **payReminderToAddress**: In case transfer amount is smaller than income and fees. \r\n  - **includeUnconfirmed**: include unconfirmed transactions when checking for unspent incomes. Default is `false`\r\n  - **checkTransactionEvery**: how often to ping the network when checking for transactions. Default is 2 minutes. \r\n  - **checkBalanceTimeout**: timeout when checking balance of an address. Default is 120 minutes. \r\n  - **checkUnspentTimeout**: timeout when checking unspent transactions of an address. Default is 120 minutes. \r\n  - **minimumConfirmations**: minimum confirmations needed in order to trigger `` event. Default is 6 (around 1 hour to achieve 6 confirmations).\r\n  - **txFee**: fee (in bitcoin) for transferring amount from ad hoc address to your address. Default is `0.0001`. [More here](https://en.bitcoin.it/wiki/Transaction_fees).\r\n\r\n###Key class\r\nThis class is responsible for creating new bitcoin addresses, storing them and transferring funds between them. Some key functions are:  \r\n`storeKey(wk)` - store your key in a local file. Can be encrypted.  \r\n`checkBalance()`- check and notify you when an address has minimum balance.\r\n`payTo(payToAddress, options, callback)` - transfer all balance of this address to another address.\r\n\r\n###Encrypt class\r\nContains helpers to encrypt and decrypt strings. Used for storing your keys data locally.  \r\n\r\n##Contribute\r\nPlease do. Fork it, star it, share it and add your code to the project. Help others.  \r\nAll the src code is written in [coffeescript](http://coffeescript.org) and is under `src/javascript`. There's a tool that convert it automatically to js each time you change a file and put it under `lib/javascript` folder. Simply run `cake build` for that. \r\n\r\n##License\r\n\r\nMIT","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}